#!/usr/bin/env dwarf

@option {
  useClient: true,
  name: "skssks",
  version: 1.33
}

// if option is true, it sets it to false
@option client;

// set option value
@option client true;

// normal import, imports globally 
import GUI;

// import related stuff
import (GUI, JSX);

// import specific exports
import GUI : { Button };

// import specific exports from each import
import (GUI, JSX) : [{ Button }, *];

// change import name, will make all distributed classes to one class
// for example, instead of Button, you have to do GUILIB.Button
import GUI as GUILIB;

// import specific export and change name
import GUI : { Button as Btn };

// previous but with multi import
import (GUI, JSX) as [GUILIB, JSXLIB];

// use this class only on types of Widget, for example Widget itself or things that inherit it. and asserts dominant information into it
import GUI 
  as Main
  useFor classType Widget
  assert {
    version: 1.7
  };

// Note: assertion means changing the default options of imports, for example you can import a file as a JSON instead of a compilable code

// Multiple import assertions, use all instead of [] to define a property to all imports
import (GUI, 3D)
  as all MainLibs
  useFor name Main
  assert all {
     version: 1.7
  };
  
// import file
import f:somefile;

// import installed package, for example in pkgs folder or DWARFPATH/pkgs folder
import pkg:somepkg;

// import subpackage from a package
import pkg:somepkg.subpkg;

// folder import
import f:anotherfolder.somefile
  as someotherfile;
  
// start with . to determine this folder
import f:.thisfolder.somefile;

// start with .. to determine parent
import f:..parent.somefile;

// use fstr for string implifications
import fstr:"folder/somefile.dwf";

// use assert to import a text file
import fstr:'folder/p.txt' as txt assert { stringify: true };

// this is a import set, you can make a set of imports and import them all with one line

import <LIB>;
import <LIB,AnotherList>;

// import single package from import list
import <LIB> 
  : {GUI}
  as libs;

// import set define with options
import set packages (GUI, MATLIB, 3D)
  opt [
    as somename
      useFor classType Some,
    as mat
      useFor type String
  ] all opt [
    assert {
      version: 1.7
    }
  ];

import <packages>;

// import super, allows you to use whatever the imported package uses. for example if they @use GUI, it will be used too, and if you use tag imports, all imported modules there will be reimported here
import f:usecases
  super (uses, import);
  
import ImportControl;

// use command
@use GUI.StateMan;
@use JSX.jsx;
@use GUI !; // ! means important 

@use m;

/*
Alright, so here,
type writes an output to the console directly, but the catch is that, it doesn't necessarily write in a new line, it just writes it.
dump is a funnyFunction, yes thats a thing in dwarf. it dumps all functions and all properties of a class and ignores circular parts. i know, cool.
global is a global variable, it is the values of the main scope, ofc you can swith that too.
*/
type dump global;


/*
Alright, import assetions, we can test for import asserions and export accordingly
*/
type import.assertions;

//classes
class Mood {
  current = "sad";
  previous = "";
  
  Mood({
    this.previous,
    required this.current
  });
  
  //Set Getter,
  :get(){
    return current;
  }
  // Set Setter
  :set(str val){
    previous = current;
    current = val;
  }
}

State<str> name = "Andy";
State<int> age = 5;
State<dbl> money = 6.1;
let mood = State<Mood>(Mood("happy"));

dyn mood: int | str = "hello";
type typeof mood

class Main extends Frame {
  
  Main(): super(process, "Frame Title");
  
  // You can bind the constructor class
  :Main(){
    str response = "";
    do wait
      response = sendHttp()
    then
    // do anything
    
    
    
    dont wait 
      response = sendHttp()
    then {
      // anything after response
    }
    // anything before response
  }
  
  
}

final int main(list<str> args){
  frame = Main();
  frame.on("exit", () {
    x.exit();
  });
}

// funnyFunctions
arr nums = (1,2,3);

push 3 nums;
nums.push(3);
push 4 nums.four;
nums.four = 4;
push 0 5 nums;
nums.shift(5)
push -1 6 nums;
nums.push(6);
push 3 7 nums;
nums[3] = 7;

list lst = [
  str(),
  Button("hhh"),
  SomeOtherClass(),
  1,
  2
];

log(lst); // normal log

pull int lst; // will pull all ints in lst
pull 0 int lst; // will pull the first int
pull -1 int lst; // pulls the -1 value of lst
pull 5 lst; // pulls the 5th of lst, lst[4]

pop SomeOtherClass lst; // removes all SomeOtherClass
pop 0 Button lst; // removes first Button

index SomeOtherClass lst; // gives index of the first SomeOtherClass or null if not found
index -1 SomeOtherClass lst; // gives last index of SomeOtherClass.

// Note: Funny Functions mostly also exist in arrays and objects(or everything). so you dont have to use the command based ones.

class versionControl extends ImportControl {
  int version = 3;
  
  setter(newValue) : any {
    version = newValue;
  }
  
  provide(imports) : any {
    if(version < 3){
      pop imports.Main;
      return imports;
    } else {
      return imports;
    }
  }
  
}



class MyClass {
  let num: int = 0;

  MyClass(this.num);

  operation + (variable){
    num += variable.num ?instance variable MyClass
    // if variable is an instance of MyClass add variable.num;
  }

}

dyn one = MyClass(1);
dyn two = MyClass(2);

one + two;

type one.num; // 3


class CustomClass {

  CustomClass(
    this.arg1: int,
    key this.arg2: int,
    key this.arg3: int = 0,
    keymap {
      this.arg4: int,
      this.arg5: int = 1
    }
  )

}

class OtherClass extends CustomClass {}

dyn widget = Widget(
  id: 'mywidget',
  children: 
    - Text("Hello")
    - Text("Yo!")
)

dyn myOtherWidget = Widget(
  children: [
    Text("Hello"),
    Text("Hi")
  ]
)

Frame({
  title: "Test Frame",
  widget: Widget.mix(widget, myOtherWidget),
  onExit(){
    exit 0;
  }
})


dyn normalObject: Object<str, any> = {
  key: "value",
  [key]: value for (dyn key in global, dyn value = global[key]),
  ...global,
  "Weird-Property-Name": () any => "any value"
}

dyn yamlObject: Object<str, any> = (
  props: 
    name: "somename"
    id: "someid"
  things:
    - somekey: "somevalue"
      somethingElse: "someOtherValue"
      "Weird-Property-Name": () any => "any value"
  ...global,
  [key]: value for (dyn key in global, dyn value = global[key]),
)

pop yamlObject.props; // deletes yamlObject.props

type name = str | int;

interface Something {
  [key: str]: name;
  something: name;
} 

// lambda
let mylabda = () {
  // do things
}
// one liner
let myOtherLabda = () => "value"

// typed lambda
let myOtherLabda2 = () str => "value"
let myOtherLabda3 = () str {
  return "value"
}

// async lambda
let myOtherLabda4 = async () Future<str> => await mylabda();


let int num = 0;
?is num // same as typeof myOtherLabda, but can't be used as typeof for typing,
int function(arg: typeof num){ // you can't use ?is in here
  // ...
}

?extends OtherClass; // returns the direct parent of this class
?extends root OtherClass; // returns the furthest parent of this class

?extends OtherClass CustomClass; // checks if OtherClass extends CustomClass

?is widget Widget; // false, since typeof Widget is a class while typeof widget is Object

?is num int; // true

?instance widget Widget; // true, since widget is an instance of Widget

type int.toString(); // int

type int; // Type int;


class SomethingClass implements Something {}


enum MyConstantList {
  DATE: Date.now()
}


// Custom Questions.
question func isWidget(widget: Widget??){
  //                           ^^^^^^^^ 
  // This means a type that can be anything but
  // is most likely a Widget
  return ?instance widget Widget;
}

type ?isWidget widget; // true
type ?isWidget "string"; // false


class QuestionableClass {
  :question(value: QuestionableClass??){
    return ?instance value QuestionableClass; 
  }
}

let q = QuestionableClass();
type ?QuestionableClass q; // true
type ?QuestionableClass "not a class"; // false


print("%r/Red Text/ normal text %b/Blue Text/") // printing works cool
print(widget) // Prints the widget in a square inside the console

type "%r/Red Text/ normal text %b/Blue Text/"; // prints this exactly


// if you use this, dont use final in main
if(import.assertions.default == true)
  export default main; 
else 
  export { Main };


export { Main as MainFrame };
export { Main } assert {
  version: versionControl
};
export default Main assert {...};
